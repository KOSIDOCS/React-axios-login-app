{"version":3,"sources":["components/FormField.jsx","components/EmailField.jsx","components/PasswordField.jsx","components/Button.jsx","components/SignUp.jsx","App.js","reportWebVitals.js","index.js"],"names":["FormField","state","value","dirty","errors","hasChanged","e","preventDefault","props","label","required","validator","f","onStateChanged","target","isEmpty","length","requiredMissing","message","setState","this","type","fieldId","placeholder","children","test","hasErrors","controlClass","join","trim","className","htmlFor","id","onChange","Component","EmailField","clearMe","restProps","validate","minDomainAtoms","Error","PasswordField","stateChanged","password","strength","zxcvbn","score","validatePasswordStrong","thresholdLength","minStrength","Math","max","min","passwordLength","passwordStrong","passwordLong","counterClass","strengthClass","data-strength","useStyles","makeStyles","theme","fabGreen","color","palette","common","white","backgroundColor","green","Button","classes","useTheme","transitionDuration","enter","transitions","duration","enteringScreen","exit","leavingScreen","buttonIcon","start","click","Zoom","in","timeout","style","transitionDelay","Fab","aria-label","onClick","SignUp","handleSubmit","a","axios","method","url","data","campaignUuid","email","then","response","statusText","status","firstName","firstname","lastName","res","open","catch","err","emailErr","errorcolor","fieldStateChanged","field","emailChanged","firstnameChanged","passwordChanged","lastNameChanged","formValidated","noValidate","Collapse","marginBottom","Alert","action","IconButton","size","fontSize","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"0UAkGeA,E,4MA7FbC,MAAQ,CAAEC,MAAO,GAAIC,OAAO,EAAOC,OAAQ,I,EAE3CC,WAAa,SAACC,GACZA,EAAEC,iBADgB,MASd,EAAKC,MAJPC,EALgB,EAKhBA,MALgB,IAMhBC,gBANgB,aAOhBC,iBAPgB,MAOJ,SAACC,GAAD,OAAOA,GAPH,MAQhBC,sBARgB,MAQC,SAACD,GAAD,OAAOA,GARR,EAWZV,EAAQI,EAAEQ,OAAOZ,MACjBa,EAA2B,IAAjBb,EAAMc,OAChBC,EAAkB,EAAKhB,MAAME,OAASO,GAAYK,EAEpDX,EAAS,GAEb,GAAIa,EAEFb,EAAM,sBAAOA,GAAP,WAAkBK,EAAlB,uBACD,GAAI,oBAAsBE,EAC/B,IACEA,EAAUT,GACV,MAAOI,GAEPF,EAAM,sBAAOA,GAAP,CAAeE,EAAEY,UAM3B,EAAKC,UACH,oBAAGhB,aAAH,eAAwB,CAAED,QAAOE,SAAQD,OAAQA,GAASA,MAC1D,kBAAMU,EAAe,EAAKZ,W,uDAIpB,IAAD,EAC0BmB,KAAKnB,MAAvBE,GADR,EACCD,MADD,EACQC,OAAOC,EADf,EACeA,OADf,EAEuDgB,KAAKZ,MAA3Da,EAFD,EAECA,KAAMZ,EAFP,EAEOA,MAAOa,EAFd,EAEcA,QAASC,EAFvB,EAEuBA,YAAaC,EAFpC,EAEoCA,SAAUC,EAF9C,EAE8CA,KAE/CC,EAAYtB,EAAOY,OAAS,EAC5BW,EAAe,CACnB,eACAxB,EAASuB,EAAY,aAAe,WAAc,IAEjDE,KAAK,KACLC,OAEH,OACE,cAAC,WAAD,UACE,sBAAKC,UAAU,uBAAf,UACE,sBAAKA,UAAU,6DAAf,UACE,uBAAOC,QAAST,EAASQ,UAAU,gBAAnC,SACGrB,IAGFiB,GACC,qBAAKI,UAAU,uDAAf,SACG1B,EAAO,QAKboB,EACD,uBACEH,KAAMA,EACNS,UAAWH,EACXK,GAAIV,EACJC,YAAaA,EACbrB,MAAOuB,EACPQ,SAAUb,KAAKf,sB,GA3EH6B,a,wBCkCTC,EA/BI,SAAC3B,GAEiCA,EAA3Ca,KAFoB,IAEde,EAAqC5B,EAArC4B,QAAuBC,GAAc7B,EAA5BG,UAFK,YAEuBH,EAFvB,iCAW5B,OACE,cAAC,EAAD,aACEa,KAAK,OACLI,KAAMW,EACNzB,UAVkB,SAACT,GACrB,IAAKoC,mBAASpC,EAAO,CAAEqC,eAAgB,IACrC,MAAM,IAAIC,MAAM,sBASZH,K,iBCqHKI,E,kDApIb,WAAYjC,GAAQ,IAAD,uBACjB,cAAMA,IAqBRkC,aAAe,SAACzC,GAGd,EAAKkB,SACH,CACEwB,SAAU1C,EAAMC,MAChB0C,SAAUC,IAAO5C,EAAMC,OAAO4C,QAEhC,kBAAM,EAAKtC,MAAMK,eAAeZ,OA9BjB,EAkCnB8C,uBAAyB,SAAC7C,GAExB,GAAIA,EAAMc,QAAU,EAAKgC,gBACvB,MAAM,IAAIR,MAAM,qBAGlB,GAAIK,IAAO3C,GAAO4C,MAAQ,EAAKG,YAC7B,MAAM,IAAIT,MAAM,qBAzCD,MAEgChC,EAAzCyC,mBAFS,MAEK,EAFL,IAEgCzC,EAAxBwC,uBAFR,MAE0B,EAF1B,SAOjB,EAAKC,YACoB,kBAAhBA,EACHC,KAAKC,IAAID,KAAKE,IAAIH,EAAa,GAAI,GACnC,EAKN,EAAKD,gBACwB,kBAApBA,EAA+BE,KAAKC,IAAIH,EAAiB,GAAK,EAGvE,EAAK/C,MAAQ,CAAE0C,SAAU,GAAIC,SAAU,GAnBtB,E,qDA4CT,IAAD,EAQHxB,KAAKZ,MAJP4B,GAJK,EAELf,KAFK,EAGLV,UAHK,EAILyB,SAEAZ,GANK,EAKLX,eALK,EAMLW,UACGa,EAPE,4EASwBjB,KAAKnB,MAA5B0C,EATD,EASCA,SAAUC,EATX,EASWA,SAEZS,EAAiBV,EAAS3B,OAC1BsC,EAAiBV,GAAYxB,KAAK6B,YAClCM,EAAeF,EAAiBjC,KAAK4B,gBAGrCQ,EAAe,CACnB,mBACAD,EACID,EACE,gBACA,gBACF,gBAEH1B,KAAK,KACLC,OAGG4B,EAAgB,CACpB,sBACAJ,EAAiB,EAAI,UAAY,aAEhCzB,KAAK,KACLC,OAEH,OACE,cAAC,WAAD,UACE,sBAAKC,UAAU,oBAAf,UAEE,eAAC,EAAD,yBACET,KAAK,WACLV,UAAWS,KAAK2B,uBAChBlC,eAAgBO,KAAKsB,aACrBjB,KAAMW,GACFC,GALN,cAOE,sBAAMP,UAAU,oBAAhB,0JAKCN,EAED,qBAAKM,UAAW2B,EAAhB,SACE,qBACE3B,UAAU,sBACV4B,gBAAed,UAIrB,qBAAKd,UAAU,wCAAf,SAEE,sBAAMA,UAAW0B,EAAjB,SACGH,EACGE,EAAY,UACPnC,KAAK4B,gBADE,KAEVK,EACF,gB,GAhHUnB,a,2CCCtByB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,SAAU,CACRC,MAAOF,EAAMG,QAAQC,OAAOC,MAC5BC,gBAAiBC,IAAM,KACvB,UAAW,CACTD,gBAAiBC,IAAM,WAkCdC,EA7BA,SAAC7D,GACd,IAAM8D,EAAUX,IACVE,EAAQU,cAERC,EAAqB,CACzBC,MAAOZ,EAAMa,YAAYC,SAASC,eAClCC,KAAMhB,EAAMa,YAAYC,SAASG,eAG3BC,EAA6BvE,EAA7BuE,WAAYC,EAAiBxE,EAAjBwE,MAAOC,EAAUzE,EAAVyE,MAC3B,OACE,qBAAKnD,UAAU,eAAf,SACI,qBAAKA,UAAU,yBAAf,SACA,cAACoD,EAAA,EAAD,CAAcC,GAAIH,EAAOI,QAASZ,EAAoBa,MAAO,CAAEC,gBAAiBN,EAAQ,QAAU,OAAlG,SACF,cAACO,EAAA,EAAD,CAAKzD,UAAWwC,EAAQR,SAAU0B,aAAW,QAAQC,QAASR,EAA9D,SACKF,KAFO,UC4KHW,E,kDA5Lb,WAAYlF,GAAQ,IAAD,8BACjB,cAAMA,IAyBRmF,aA1BmB,uCA0BJ,WAAOrF,GAAP,SAAAsF,EAAA,sDACbtF,EAAEC,iBAEFsF,IAAM,CACJC,OAAQ,OACRC,IAAK,wCACLC,KAAM,CACJC,aAAc,uCACdD,KAAM,CACJE,MAAO,EAAKjG,MAAMiG,UAGrBC,MAAK,SAACC,GACqB,OAAxBA,EAASC,YAA2C,MAApBD,EAASE,QAC3CT,IAAM,CACJC,OAAQ,OACRC,IAAK,oCACLC,KAAM,CACJC,aAAc,uCACdD,KAAM,CACJO,UAAW,EAAKtG,MAAMuG,UACtBC,SAAU,EAAKxG,MAAMwG,SACrBP,MAAO,EAAKjG,MAAMiG,MAClBvD,SAAU,EAAK1C,MAAM0C,aAIxBwD,MAAK,SAACO,GACc,MAAfA,EAAIJ,QACN,EAAKnF,SAAS,CACZqF,UAAW,GACXC,SAAU,GACVP,MAAO,GACPvD,SAAU,GACVgE,MAAM,EACNzF,QAASwF,EAAIV,KAAK9E,aAIvB0F,OAAM,SAACC,GACN,IAAIC,EAAWD,EAAIT,SAASJ,KAAK5F,OAAO,GAAGc,QAC3C,EAAKC,SAAS,CAAEwF,MAAM,EAAMzF,QAAS4F,EAAUC,YAAY,UAzCtD,2CA1BI,sDAIjB,EAAK9G,MAAQ,CACXuG,UAAW,GACXC,SAAU,GACVP,MAAO,GACPvD,SAAU,GACVgE,MAAM,EACNzF,QAAS,GACT6F,YAAY,GAKd,EAAKC,kBAAoB,SAACC,GAAD,OAAW,SAAChH,GAAD,OAClC,EAAKkB,SAAL,eAAiB8F,EAAQhH,EAAMC,UAGjC,EAAKgH,aAAe,EAAKF,kBAAkB,SAC3C,EAAKG,iBAAmB,EAAKH,kBAAkB,aAC/C,EAAKI,gBAAkB,EAAKJ,kBAAkB,YAC9C,EAAKK,gBAAkB,EAAKL,kBAAkB,YAvB7B,E,qDAyET,IAAD,SAQH5F,KAAKnB,MANPuG,EAFK,EAELA,UACAC,EAHK,EAGLA,SACAP,EAJK,EAILA,MACAvD,EALK,EAKLA,SACAzB,EANK,EAMLA,QACA6F,EAPK,EAOLA,WAEIO,EAAgBd,GAAaC,GAAYP,GAASvD,EAgBxD,OACE,qBAAKb,UAAU,6DAAf,SACE,uBAAMgE,OAAO,OAAOyB,YAAU,EAA9B,UACE,sBAAKzF,UAAU,uEAAf,UACE,yBAAQA,UAAU,kBAAlB,iCACsB,cAAC,IAAD,OAGrBwF,GACC,cAAC,EAAD,CACEvC,WAAY,cAAC,IAAD,IACZC,OAAO,EACP3D,KAAK,SACL4D,MAAO7D,KAAKuE,kBAKlB,cAAC6B,EAAA,EAAD,CAAUrC,GAAI/D,KAAKnB,MAAM0G,KAAMtB,MAAO,CAAEoC,aAAc,QAAtD,SACE,cAACC,EAAA,EAAD,CACE3D,MAAOgD,EAAa,QAAU,UAC9BY,OACE,cAACC,EAAA,EAAD,CACEpC,aAAW,QACXzB,MAAOgD,EAAa,YAAc,UAClCc,KAAK,QACLpC,QAAS,WACP,EAAKtE,SAAS,CAAEwF,MAAM,KAL1B,SAQE,cAAC,IAAD,CAAWmB,SAAS,cAX1B,SAeG5G,MAIL,sBAAKY,UAAU,4CAAf,UAEE,cAAC,EAAD,CACET,KAAK,OACLC,QAAQ,YACRb,MAAM,aACNc,YAAY,mBACZZ,UAzDgB,SAACT,GAEzB,IADc,wBACHuB,KAAKvB,GAAQ,MAAM,IAAIsC,MAAM,yBAwDhC3B,eAAgBO,KAAK+F,iBACrB1F,KAAML,KAAKnB,MAAMuG,UACjB9F,UAAQ,IAGV,cAAC,EAAD,CACEW,KAAK,OACLC,QAAQ,WACRb,MAAM,YACNc,YAAY,iBACZZ,UA7De,SAACT,GAExB,IADc,wBACHuB,KAAKvB,GAAQ,MAAM,IAAIsC,MAAM,wBA4DhC3B,eAAgBO,KAAKiG,gBACrB5F,KAAML,KAAKnB,MAAMwG,SACjB/F,UAAQ,IAIV,cAAC,EAAD,CACEY,QAAQ,QACRb,MAAM,QACNc,YAAY,sBACZV,eAAgBO,KAAK8F,aACrB9E,QAAShB,KAAKnB,MAAMiG,MACpBxF,UAAQ,IAIV,cAAC,EAAD,CACEY,QAAQ,WACRb,MAAM,WACNc,YAAY,iBACZV,eAAgBO,KAAKgG,gBACrBpE,gBAAiB,EACjBC,YAAa,EACbb,QAAShB,KAAKnB,MAAM0C,SACpBjC,UAAQ,gB,GApLDwB,aCIN6F,MAZf,WACE,OACE,qBAAKjG,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,qBAAKA,UAAU,kDAAf,SACE,cAAC,EAAD,WCEKkG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,K","file":"static/js/main.cc565085.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass FormField extends Component {\n  // initialize state\n  state = { value: \"\", dirty: false, errors: [] };\n\n  hasChanged = (e) => {\n    e.preventDefault();\n\n    // destructure props - assign default dummy functions to validator and onStateChanged props\n    const {\n      label,\n      required = false,\n      validator = (f) => f,\n      onStateChanged = (f) => f,\n    } = this.props;\n\n    const value = e.target.value;\n    const isEmpty = value.length === 0;\n    const requiredMissing = this.state.dirty && required && isEmpty;\n\n    let errors = [];\n\n    if (requiredMissing) {\n      // if required and is empty, add required error to state\n      errors = [...errors, `${label} is required`];\n    } else if (\"function\" === typeof validator) {\n      try {\n        validator(value);\n      } catch (e) {\n        // if validator throws error, add validation error to state\n        errors = [...errors, e.message];\n      }\n    }\n\n    // update state and call the onStateChanged callback fn after the update\n    // dirty is only changed to true and remains true on and after the first state update\n    this.setState(\n      ({ dirty = false }) => ({ value, errors, dirty: !dirty || dirty }),\n      () => onStateChanged(this.state)\n    );\n  };\n\n  render() {\n    const { value, dirty, errors } = this.state;\n    const { type, label, fieldId, placeholder, children, test } = this.props;\n\n    const hasErrors = errors.length > 0;\n    const controlClass = [\n      \"form-control\",\n      dirty ? (hasErrors ? \"is-invalid\" : \"is-valid\") : \"\",\n    ]\n      .join(\" \")\n      .trim();\n\n    return (\n      <Fragment>\n        <div className=\"form-group px-3 pb-2\">\n          <div className=\"d-flex flex-row justify-content-between align-items-center\">\n            <label htmlFor={fieldId} className=\"control-label\">\n              {label}\n            </label>\n            {/** Render the first error if there are any errors **/}\n            {hasErrors && (\n              <div className=\"error form-hint font-weight-bold text-right m-0 mb-2\">\n                {errors[0]}\n              </div>\n            )}\n          </div>\n          {/** Render the children nodes passed to component **/}\n          {children}\n          <input\n            type={type}\n            className={controlClass}\n            id={fieldId}\n            placeholder={placeholder}\n            value={test}\n            onChange={this.hasChanged}\n          />\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nFormField.propTypes = {\n  type: PropTypes.oneOf([\"text\", \"password\"]).isRequired,\n  label: PropTypes.string.isRequired,\n  fieldId: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  required: PropTypes.bool,\n  children: PropTypes.node,\n  validator: PropTypes.func,\n  onStateChanged: PropTypes.func,\n  test: PropTypes.string,\n};\n\nexport default FormField;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { validate } from \"isemail\";\n\nimport FormField from \"./FormField\";\n\nconst EmailField = (props) => {\n  // prevent passing type and validator props from this component to the rendered form field component\n  const { type, clearMe, validator, ...restProps } = props;\n\n  // validateEmail function using the validate() method of the isemail package\n  const validateEmail = (value) => {\n    if (!validate(value, { minDomainAtoms: 2 }))\n      throw new Error(\"Email is invalid\");\n  };\n\n  // pass the validateEmail to the validator prop\n  return (\n    <FormField\n      type=\"text\"\n      test={clearMe}\n      validator={validateEmail}\n      {...restProps}\n    />\n  );\n};\n\nEmailField.propTypes = {\n  label: PropTypes.string.isRequired,\n  fieldId: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  required: PropTypes.bool,\n  children: PropTypes.node,\n  onStateChanged: PropTypes.func,\n  clearMe: PropTypes.string,\n};\n\nexport default EmailField;\n","import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport zxcvbn from \"zxcvbn\";\n\nimport FormField from \"./FormField\";\n\nclass PasswordField extends Component {\n  constructor(props) {\n    super(props);\n    const { minStrength = 3, thresholdLength = 7 } = props;\n\n    // set default minStrength to 3 if not a number or not specified\n    // minStrength must be a a number between 0 - 4\n\n    this.minStrength =\n      typeof minStrength === \"number\"\n        ? Math.max(Math.min(minStrength, 4), 0)\n        : 3;\n\n    // set default thresholdLength to 7 if not a number or not specified\n    // thresholdLength must be a minimum value of 7\n\n    this.thresholdLength =\n      typeof thresholdLength === \"number\" ? Math.max(thresholdLength, 7) : 7;\n\n    // initialize internal component state\n    this.state = { password: \"\", strength: 0 };\n  }\n\n  stateChanged = (state) => {\n    // update the internal state using the updated state from the form field\n\n    this.setState(\n      {\n        password: state.value,\n        strength: zxcvbn(state.value).score,\n      },\n      () => this.props.onStateChanged(state)\n    );\n  };\n\n  validatePasswordStrong = (value) => {\n    // ensure password is long enough\n    if (value.length <= this.thresholdLength)\n      throw new Error(\"Password is short\");\n\n    // ensure password is strong enough using the zxcvbn library\n    if (zxcvbn(value).score < this.minStrength)\n      throw new Error(\"Password is weak\");\n  };\n\n  render() {\n    const {\n      type,\n      validator,\n      clearMe,\n      onStateChanged,\n      children,\n      ...restProps\n    } = this.props;\n    const { password, strength } = this.state;\n\n    const passwordLength = password.length;\n    const passwordStrong = strength >= this.minStrength;\n    const passwordLong = passwordLength > this.thresholdLength;\n\n    // dynamically set the password length counter class\n    const counterClass = [\n      \"badge badge-pill\",\n      passwordLong\n        ? passwordStrong\n          ? \"badge-success\"\n          : \"badge-warning\"\n        : \"badge-danger\",\n    ]\n      .join(\" \")\n      .trim();\n\n    // password strength meter is only visible when password is not empty\n    const strengthClass = [\n      \"strength-meter mt-2\",\n      passwordLength > 0 ? \"visible\" : \"invisible\",\n    ]\n      .join(\" \")\n      .trim();\n\n    return (\n      <Fragment>\n        <div className=\"position-relative\">\n          {/** Pass the validation and stateChanged functions as props to the form field **/}\n          <FormField\n            type=\"password\"\n            validator={this.validatePasswordStrong}\n            onStateChanged={this.stateChanged}\n            test={clearMe}\n            {...restProps}\n          >\n            <span className=\"d-block form-hint\">\n              To conform with our Strong Password policy, you are required to\n              use a sufficiently strong password. Password must be more than 7\n              characters.\n            </span>\n            {children}\n            {/** Render the password strength meter **/}\n            <div className={strengthClass}>\n              <div\n                className=\"strength-meter-fill\"\n                data-strength={strength}\n              ></div>\n            </div>\n          </FormField>\n          <div className=\"position-absolute password-count mx-3\">\n            {/** Render the password length counter indicator **/}\n            <span className={counterClass}>\n              {passwordLength\n                ? passwordLong\n                  ? `${this.thresholdLength}+`\n                  : passwordLength\n                : \"\"}\n            </span>\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nPasswordField.propTypes = {\n  label: PropTypes.string.isRequired,\n  fieldId: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  required: PropTypes.bool,\n  children: PropTypes.node,\n  onStateChanged: PropTypes.func,\n  minStrength: PropTypes.number,\n  thresholdLength: PropTypes.number,\n  clearMe: PropTypes.string,\n};\n\nexport default PasswordField;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Zoom from \"@material-ui/core/Zoom\";\nimport Fab from \"@material-ui/core/Fab\";\nimport { green } from \"@material-ui/core/colors\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  fabGreen: {\n    color: theme.palette.common.white,\n    backgroundColor: green[500],\n    \"&:hover\": {\n      backgroundColor: green[600],\n    },\n  },\n}));\n\nconst Button = (props) => {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const transitionDuration = {\n    enter: theme.transitions.duration.enteringScreen,\n    exit: theme.transitions.duration.leavingScreen,\n  };\n\n  const { buttonIcon, start, click } = props\n  return (\n    <div className=\"button-outer\">\n        <div className=\"button-outer__position\">\n        <Zoom key=\"1\" in={start} timeout={transitionDuration} style={{ transitionDelay: start ? '500ms' : '0ms' }}>\n      <Fab className={classes.fabGreen} aria-label=\"Login\" onClick={click}>\n          {buttonIcon}\n      </Fab>\n    </Zoom>\n        </div>\n    </div>\n  );\n};\n\nButton.propTypes = {\n    buttonIcon: PropTypes.any.isRequired,\n    start: PropTypes.bool,\n    click: PropTypes.func,\n};\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport LockIcon from \"@material-ui/icons/Lock\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport axios from \"axios\";\n\nimport FormField from \"./FormField\";\nimport EmailField from \"./EmailField\";\nimport PasswordField from \"./PasswordField\";\nimport Button from \"./Button\";\n\nclass SignUp extends Component {\n  constructor(props) {\n    super(props);\n    // initialize state to hold validity of form fields\n\n    this.state = {\n      firstname: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      open: false,\n      message: \"\",\n      errorcolor: false,\n    };\n\n    // higher-order function that returns a state change watch function\n    // sets the corresponding state property to it's value if the form field has no errors\n    this.fieldStateChanged = (field) => (state) =>\n      this.setState({ [field]: state.value });\n\n    // state change watch functions for each fields\n    this.emailChanged = this.fieldStateChanged(\"email\");\n    this.firstnameChanged = this.fieldStateChanged(\"firstname\");\n    this.passwordChanged = this.fieldStateChanged(\"password\");\n    this.lastNameChanged = this.fieldStateChanged(\"lastName\");\n  }\n\n  handleSubmit = async (e) => {\n    e.preventDefault();\n\n    axios({\n      method: \"post\",\n      url: \"https://api.raisely.com/v3/check-user\",\n      data: {\n        campaignUuid: \"46aa3270-d2ee-11ea-a9f0-e9a68ccff42a\",\n        data: {\n          email: this.state.email,\n        },\n      },\n    }).then((response) => {\n      if (response.statusText === \"OK\" || response.status === 200) {\n        axios({\n          method: \"post\",\n          url: \"https://api.raisely.com/v3/signup\",\n          data: {\n            campaignUuid: \"46aa3270-d2ee-11ea-a9f0-e9a68ccff42a\",\n            data: {\n              firstName: this.state.firstname,\n              lastName: this.state.lastName,\n              email: this.state.email,\n              password: this.state.password,\n            },\n          },\n        })\n          .then((res) => {\n            if (res.status === 200) {\n              this.setState({\n                firstname: \"\",\n                lastName: \"\",\n                email: \"\",\n                password: \"\",\n                open: true,\n                message: res.data.message,\n              });\n            }\n          })\n          .catch((err) => {\n            let emailErr = err.response.data.errors[0].message;\n            this.setState({ open: true, message: emailErr, errorcolor: true });\n          });\n      }\n    });\n  };\n\n  render() {\n    const {\n      firstname,\n      lastName,\n      email,\n      password,\n      message,\n      errorcolor,\n    } = this.state;\n    const formValidated = firstname && lastName && email && password;\n\n    // validation function for the firstname\n    // ensures that firstname contains at least name.\n    const validateFirstName = (value) => {\n      const regex = /^[a-zA-Z0-9_.-]{2,}$/i;\n      if (!regex.test(value)) throw new Error(\"FirstName is invalid\");\n    };\n\n    // validation function for the lastname\n    // ensures that lastname contains at least name.\n    const validateLastName = (value) => {\n      const regex = /^[a-zA-Z0-9_.-]{2,}$/i;\n      if (!regex.test(value)) throw new Error(\"LastName is invalid\");\n    };\n\n    return (\n      <div className=\"form-container d-table-cell position-relative align-middle\">\n        <form method=\"POST\" noValidate>\n          <div className=\"d-flex flex-row justify-content-between align-items-center px-3 mb-5\">\n            <legend className=\"form-label mb-0\">\n              Raisely SignUp Form <LockIcon />\n            </legend>\n            {/** Show the form button only if all fields are valid **/}\n            {formValidated && (\n              <Button\n                buttonIcon={<LockIcon />}\n                start={true}\n                type=\"submit\"\n                click={this.handleSubmit}\n              />\n            )}\n          </div>\n\n          <Collapse in={this.state.open} style={{ marginBottom: \"10px\" }}>\n            <Alert\n              color={errorcolor ? \"error\" : \"success\"}\n              action={\n                <IconButton\n                  aria-label=\"close\"\n                  color={errorcolor ? \"secondary\" : \"inherit\"}\n                  size=\"small\"\n                  onClick={() => {\n                    this.setState({ open: false });\n                  }}\n                >\n                  <CloseIcon fontSize=\"inherit\" />\n                </IconButton>\n              }\n            >\n              {message}\n            </Alert>\n          </Collapse>\n\n          <div className=\"py-5 border-gray border-top border-bottom\">\n            {/** Render the firstname form field passing the name validation fn **/}\n            <FormField\n              type=\"text\"\n              fieldId=\"firstname\"\n              label=\"First Name\"\n              placeholder=\"Enter First Name\"\n              validator={validateFirstName}\n              onStateChanged={this.firstnameChanged}\n              test={this.state.firstname}\n              required\n            />\n            {/** Render the lastname form field passing the name validation fn **/}\n            <FormField\n              type=\"text\"\n              fieldId=\"lastName\"\n              label=\"Last Name\"\n              placeholder=\"Your Last Name\"\n              validator={validateLastName}\n              onStateChanged={this.lastNameChanged}\n              test={this.state.lastName}\n              required\n            />\n\n            {/** Render the email field component **/}\n            <EmailField\n              fieldId=\"email\"\n              label=\"Email\"\n              placeholder=\"Enter Email Address\"\n              onStateChanged={this.emailChanged}\n              clearMe={this.state.email}\n              required\n            />\n\n            {/** Render the password field component using thresholdLength of 7 and minStrength of 3 **/}\n            <PasswordField\n              fieldId=\"password\"\n              label=\"Password\"\n              placeholder=\"Enter Password\"\n              onStateChanged={this.passwordChanged}\n              thresholdLength={7}\n              minStrength={3}\n              clearMe={this.state.password}\n              required\n            />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SignUp;\n","import React from \"react\";\nimport \"./App.scss\";\n\nimport SignUp from \"./components/SignUp\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"main-container d-table position-absolute m-auto\">\n          <SignUp />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}